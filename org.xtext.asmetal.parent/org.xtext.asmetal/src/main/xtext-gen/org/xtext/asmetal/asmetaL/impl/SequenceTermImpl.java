/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.asmetal.asmetaL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.asmetal.asmetaL.AsmetaLPackage;
import org.xtext.asmetal.asmetaL.ConstantTerm;
import org.xtext.asmetal.asmetaL.SequenceTerm;
import org.xtext.asmetal.asmetaL.Term;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sequence Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.SequenceTermImpl#getStart_term <em>Start term</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.SequenceTermImpl#getOther_terms <em>Other terms</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.SequenceTermImpl#getEnd_term <em>End term</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.SequenceTermImpl#getStep <em>Step</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SequenceTermImpl extends CollectionTermImpl implements SequenceTerm
{
  /**
   * The cached value of the '{@link #getStart_term() <em>Start term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart_term()
   * @generated
   * @ordered
   */
  protected Term start_term;

  /**
   * The cached value of the '{@link #getOther_terms() <em>Other terms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOther_terms()
   * @generated
   * @ordered
   */
  protected EList<Term> other_terms;

  /**
   * The cached value of the '{@link #getEnd_term() <em>End term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd_term()
   * @generated
   * @ordered
   */
  protected Term end_term;

  /**
   * The cached value of the '{@link #getStep() <em>Step</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStep()
   * @generated
   * @ordered
   */
  protected ConstantTerm step;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SequenceTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetaLPackage.Literals.SEQUENCE_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getStart_term()
  {
    return start_term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStart_term(Term newStart_term, NotificationChain msgs)
  {
    Term oldStart_term = start_term;
    start_term = newStart_term;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.SEQUENCE_TERM__START_TERM, oldStart_term, newStart_term);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStart_term(Term newStart_term)
  {
    if (newStart_term != start_term)
    {
      NotificationChain msgs = null;
      if (start_term != null)
        msgs = ((InternalEObject)start_term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.SEQUENCE_TERM__START_TERM, null, msgs);
      if (newStart_term != null)
        msgs = ((InternalEObject)newStart_term).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.SEQUENCE_TERM__START_TERM, null, msgs);
      msgs = basicSetStart_term(newStart_term, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.SEQUENCE_TERM__START_TERM, newStart_term, newStart_term));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getOther_terms()
  {
    if (other_terms == null)
    {
      other_terms = new EObjectContainmentEList<Term>(Term.class, this, AsmetaLPackage.SEQUENCE_TERM__OTHER_TERMS);
    }
    return other_terms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getEnd_term()
  {
    return end_term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnd_term(Term newEnd_term, NotificationChain msgs)
  {
    Term oldEnd_term = end_term;
    end_term = newEnd_term;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.SEQUENCE_TERM__END_TERM, oldEnd_term, newEnd_term);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnd_term(Term newEnd_term)
  {
    if (newEnd_term != end_term)
    {
      NotificationChain msgs = null;
      if (end_term != null)
        msgs = ((InternalEObject)end_term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.SEQUENCE_TERM__END_TERM, null, msgs);
      if (newEnd_term != null)
        msgs = ((InternalEObject)newEnd_term).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.SEQUENCE_TERM__END_TERM, null, msgs);
      msgs = basicSetEnd_term(newEnd_term, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.SEQUENCE_TERM__END_TERM, newEnd_term, newEnd_term));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantTerm getStep()
  {
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStep(ConstantTerm newStep, NotificationChain msgs)
  {
    ConstantTerm oldStep = step;
    step = newStep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.SEQUENCE_TERM__STEP, oldStep, newStep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStep(ConstantTerm newStep)
  {
    if (newStep != step)
    {
      NotificationChain msgs = null;
      if (step != null)
        msgs = ((InternalEObject)step).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.SEQUENCE_TERM__STEP, null, msgs);
      if (newStep != null)
        msgs = ((InternalEObject)newStep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.SEQUENCE_TERM__STEP, null, msgs);
      msgs = basicSetStep(newStep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.SEQUENCE_TERM__STEP, newStep, newStep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetaLPackage.SEQUENCE_TERM__START_TERM:
        return basicSetStart_term(null, msgs);
      case AsmetaLPackage.SEQUENCE_TERM__OTHER_TERMS:
        return ((InternalEList<?>)getOther_terms()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.SEQUENCE_TERM__END_TERM:
        return basicSetEnd_term(null, msgs);
      case AsmetaLPackage.SEQUENCE_TERM__STEP:
        return basicSetStep(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetaLPackage.SEQUENCE_TERM__START_TERM:
        return getStart_term();
      case AsmetaLPackage.SEQUENCE_TERM__OTHER_TERMS:
        return getOther_terms();
      case AsmetaLPackage.SEQUENCE_TERM__END_TERM:
        return getEnd_term();
      case AsmetaLPackage.SEQUENCE_TERM__STEP:
        return getStep();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetaLPackage.SEQUENCE_TERM__START_TERM:
        setStart_term((Term)newValue);
        return;
      case AsmetaLPackage.SEQUENCE_TERM__OTHER_TERMS:
        getOther_terms().clear();
        getOther_terms().addAll((Collection<? extends Term>)newValue);
        return;
      case AsmetaLPackage.SEQUENCE_TERM__END_TERM:
        setEnd_term((Term)newValue);
        return;
      case AsmetaLPackage.SEQUENCE_TERM__STEP:
        setStep((ConstantTerm)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.SEQUENCE_TERM__START_TERM:
        setStart_term((Term)null);
        return;
      case AsmetaLPackage.SEQUENCE_TERM__OTHER_TERMS:
        getOther_terms().clear();
        return;
      case AsmetaLPackage.SEQUENCE_TERM__END_TERM:
        setEnd_term((Term)null);
        return;
      case AsmetaLPackage.SEQUENCE_TERM__STEP:
        setStep((ConstantTerm)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.SEQUENCE_TERM__START_TERM:
        return start_term != null;
      case AsmetaLPackage.SEQUENCE_TERM__OTHER_TERMS:
        return other_terms != null && !other_terms.isEmpty();
      case AsmetaLPackage.SEQUENCE_TERM__END_TERM:
        return end_term != null;
      case AsmetaLPackage.SEQUENCE_TERM__STEP:
        return step != null;
    }
    return super.eIsSet(featureID);
  }

} //SequenceTermImpl
