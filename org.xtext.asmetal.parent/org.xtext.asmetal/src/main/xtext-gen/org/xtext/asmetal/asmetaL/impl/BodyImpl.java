/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.asmetal.asmetaL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.asmetal.asmetaL.AsmetaLPackage;
import org.xtext.asmetal.asmetaL.Body;
import org.xtext.asmetal.asmetaL.DomainDefinition;
import org.xtext.asmetal.asmetaL.FairnessConstraint;
import org.xtext.asmetal.asmetaL.FunctionDefinition;
import org.xtext.asmetal.asmetaL.InvariantConstraint;
import org.xtext.asmetal.asmetaL.Property;
import org.xtext.asmetal.asmetaL.RuleDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.BodyImpl#getDomainDefinition <em>Domain Definition</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.BodyImpl#getFunctionDefinition <em>Function Definition</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.BodyImpl#getRuleDeclaration <em>Rule Declaration</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.BodyImpl#getInvariantConstraint <em>Invariant Constraint</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.BodyImpl#getFairnessConstraint <em>Fairness Constraint</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.BodyImpl#getProperty <em>Property</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BodyImpl extends MinimalEObjectImpl.Container implements Body
{
  /**
   * The cached value of the '{@link #getDomainDefinition() <em>Domain Definition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainDefinition()
   * @generated
   * @ordered
   */
  protected EList<DomainDefinition> domainDefinition;

  /**
   * The cached value of the '{@link #getFunctionDefinition() <em>Function Definition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionDefinition()
   * @generated
   * @ordered
   */
  protected EList<FunctionDefinition> functionDefinition;

  /**
   * The cached value of the '{@link #getRuleDeclaration() <em>Rule Declaration</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuleDeclaration()
   * @generated
   * @ordered
   */
  protected EList<RuleDeclaration> ruleDeclaration;

  /**
   * The cached value of the '{@link #getInvariantConstraint() <em>Invariant Constraint</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvariantConstraint()
   * @generated
   * @ordered
   */
  protected EList<InvariantConstraint> invariantConstraint;

  /**
   * The cached value of the '{@link #getFairnessConstraint() <em>Fairness Constraint</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFairnessConstraint()
   * @generated
   * @ordered
   */
  protected EList<FairnessConstraint> fairnessConstraint;

  /**
   * The cached value of the '{@link #getProperty() <em>Property</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected EList<Property> property;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetaLPackage.Literals.BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DomainDefinition> getDomainDefinition()
  {
    if (domainDefinition == null)
    {
      domainDefinition = new EObjectContainmentEList<DomainDefinition>(DomainDefinition.class, this, AsmetaLPackage.BODY__DOMAIN_DEFINITION);
    }
    return domainDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionDefinition> getFunctionDefinition()
  {
    if (functionDefinition == null)
    {
      functionDefinition = new EObjectContainmentEList<FunctionDefinition>(FunctionDefinition.class, this, AsmetaLPackage.BODY__FUNCTION_DEFINITION);
    }
    return functionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RuleDeclaration> getRuleDeclaration()
  {
    if (ruleDeclaration == null)
    {
      ruleDeclaration = new EObjectContainmentEList<RuleDeclaration>(RuleDeclaration.class, this, AsmetaLPackage.BODY__RULE_DECLARATION);
    }
    return ruleDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InvariantConstraint> getInvariantConstraint()
  {
    if (invariantConstraint == null)
    {
      invariantConstraint = new EObjectContainmentEList<InvariantConstraint>(InvariantConstraint.class, this, AsmetaLPackage.BODY__INVARIANT_CONSTRAINT);
    }
    return invariantConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FairnessConstraint> getFairnessConstraint()
  {
    if (fairnessConstraint == null)
    {
      fairnessConstraint = new EObjectContainmentEList<FairnessConstraint>(FairnessConstraint.class, this, AsmetaLPackage.BODY__FAIRNESS_CONSTRAINT);
    }
    return fairnessConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Property> getProperty()
  {
    if (property == null)
    {
      property = new EObjectContainmentEList<Property>(Property.class, this, AsmetaLPackage.BODY__PROPERTY);
    }
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetaLPackage.BODY__DOMAIN_DEFINITION:
        return ((InternalEList<?>)getDomainDefinition()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.BODY__FUNCTION_DEFINITION:
        return ((InternalEList<?>)getFunctionDefinition()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.BODY__RULE_DECLARATION:
        return ((InternalEList<?>)getRuleDeclaration()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.BODY__INVARIANT_CONSTRAINT:
        return ((InternalEList<?>)getInvariantConstraint()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.BODY__FAIRNESS_CONSTRAINT:
        return ((InternalEList<?>)getFairnessConstraint()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.BODY__PROPERTY:
        return ((InternalEList<?>)getProperty()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetaLPackage.BODY__DOMAIN_DEFINITION:
        return getDomainDefinition();
      case AsmetaLPackage.BODY__FUNCTION_DEFINITION:
        return getFunctionDefinition();
      case AsmetaLPackage.BODY__RULE_DECLARATION:
        return getRuleDeclaration();
      case AsmetaLPackage.BODY__INVARIANT_CONSTRAINT:
        return getInvariantConstraint();
      case AsmetaLPackage.BODY__FAIRNESS_CONSTRAINT:
        return getFairnessConstraint();
      case AsmetaLPackage.BODY__PROPERTY:
        return getProperty();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetaLPackage.BODY__DOMAIN_DEFINITION:
        getDomainDefinition().clear();
        getDomainDefinition().addAll((Collection<? extends DomainDefinition>)newValue);
        return;
      case AsmetaLPackage.BODY__FUNCTION_DEFINITION:
        getFunctionDefinition().clear();
        getFunctionDefinition().addAll((Collection<? extends FunctionDefinition>)newValue);
        return;
      case AsmetaLPackage.BODY__RULE_DECLARATION:
        getRuleDeclaration().clear();
        getRuleDeclaration().addAll((Collection<? extends RuleDeclaration>)newValue);
        return;
      case AsmetaLPackage.BODY__INVARIANT_CONSTRAINT:
        getInvariantConstraint().clear();
        getInvariantConstraint().addAll((Collection<? extends InvariantConstraint>)newValue);
        return;
      case AsmetaLPackage.BODY__FAIRNESS_CONSTRAINT:
        getFairnessConstraint().clear();
        getFairnessConstraint().addAll((Collection<? extends FairnessConstraint>)newValue);
        return;
      case AsmetaLPackage.BODY__PROPERTY:
        getProperty().clear();
        getProperty().addAll((Collection<? extends Property>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.BODY__DOMAIN_DEFINITION:
        getDomainDefinition().clear();
        return;
      case AsmetaLPackage.BODY__FUNCTION_DEFINITION:
        getFunctionDefinition().clear();
        return;
      case AsmetaLPackage.BODY__RULE_DECLARATION:
        getRuleDeclaration().clear();
        return;
      case AsmetaLPackage.BODY__INVARIANT_CONSTRAINT:
        getInvariantConstraint().clear();
        return;
      case AsmetaLPackage.BODY__FAIRNESS_CONSTRAINT:
        getFairnessConstraint().clear();
        return;
      case AsmetaLPackage.BODY__PROPERTY:
        getProperty().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.BODY__DOMAIN_DEFINITION:
        return domainDefinition != null && !domainDefinition.isEmpty();
      case AsmetaLPackage.BODY__FUNCTION_DEFINITION:
        return functionDefinition != null && !functionDefinition.isEmpty();
      case AsmetaLPackage.BODY__RULE_DECLARATION:
        return ruleDeclaration != null && !ruleDeclaration.isEmpty();
      case AsmetaLPackage.BODY__INVARIANT_CONSTRAINT:
        return invariantConstraint != null && !invariantConstraint.isEmpty();
      case AsmetaLPackage.BODY__FAIRNESS_CONSTRAINT:
        return fairnessConstraint != null && !fairnessConstraint.isEmpty();
      case AsmetaLPackage.BODY__PROPERTY:
        return property != null && !property.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BodyImpl
