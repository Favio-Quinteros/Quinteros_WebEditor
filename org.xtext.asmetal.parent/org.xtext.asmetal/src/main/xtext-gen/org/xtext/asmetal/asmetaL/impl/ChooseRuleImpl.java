/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.asmetal.asmetaL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.asmetal.asmetaL.AsmetaLPackage;
import org.xtext.asmetal.asmetaL.ChooseRule;
import org.xtext.asmetal.asmetaL.Rule;
import org.xtext.asmetal.asmetaL.Term;
import org.xtext.asmetal.asmetaL.VariableTerm;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Choose Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.ChooseRuleImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.ChooseRuleImpl#getRanges <em>Ranges</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.ChooseRuleImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.ChooseRuleImpl#getDoRule <em>Do Rule</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.ChooseRuleImpl#getIfnone <em>Ifnone</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChooseRuleImpl extends BasicRuleImpl implements ChooseRule
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected EList<VariableTerm> variable;

  /**
   * The cached value of the '{@link #getRanges() <em>Ranges</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRanges()
   * @generated
   * @ordered
   */
  protected EList<Term> ranges;

  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected Term guard;

  /**
   * The cached value of the '{@link #getDoRule() <em>Do Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDoRule()
   * @generated
   * @ordered
   */
  protected Rule doRule;

  /**
   * The cached value of the '{@link #getIfnone() <em>Ifnone</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfnone()
   * @generated
   * @ordered
   */
  protected Rule ifnone;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChooseRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetaLPackage.Literals.CHOOSE_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableTerm> getVariable()
  {
    if (variable == null)
    {
      variable = new EObjectContainmentEList<VariableTerm>(VariableTerm.class, this, AsmetaLPackage.CHOOSE_RULE__VARIABLE);
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getRanges()
  {
    if (ranges == null)
    {
      ranges = new EObjectContainmentEList<Term>(Term.class, this, AsmetaLPackage.CHOOSE_RULE__RANGES);
    }
    return ranges;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(Term newGuard, NotificationChain msgs)
  {
    Term oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.CHOOSE_RULE__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuard(Term newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.CHOOSE_RULE__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.CHOOSE_RULE__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.CHOOSE_RULE__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule getDoRule()
  {
    return doRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDoRule(Rule newDoRule, NotificationChain msgs)
  {
    Rule oldDoRule = doRule;
    doRule = newDoRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.CHOOSE_RULE__DO_RULE, oldDoRule, newDoRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDoRule(Rule newDoRule)
  {
    if (newDoRule != doRule)
    {
      NotificationChain msgs = null;
      if (doRule != null)
        msgs = ((InternalEObject)doRule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.CHOOSE_RULE__DO_RULE, null, msgs);
      if (newDoRule != null)
        msgs = ((InternalEObject)newDoRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.CHOOSE_RULE__DO_RULE, null, msgs);
      msgs = basicSetDoRule(newDoRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.CHOOSE_RULE__DO_RULE, newDoRule, newDoRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule getIfnone()
  {
    return ifnone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfnone(Rule newIfnone, NotificationChain msgs)
  {
    Rule oldIfnone = ifnone;
    ifnone = newIfnone;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.CHOOSE_RULE__IFNONE, oldIfnone, newIfnone);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIfnone(Rule newIfnone)
  {
    if (newIfnone != ifnone)
    {
      NotificationChain msgs = null;
      if (ifnone != null)
        msgs = ((InternalEObject)ifnone).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.CHOOSE_RULE__IFNONE, null, msgs);
      if (newIfnone != null)
        msgs = ((InternalEObject)newIfnone).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.CHOOSE_RULE__IFNONE, null, msgs);
      msgs = basicSetIfnone(newIfnone, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.CHOOSE_RULE__IFNONE, newIfnone, newIfnone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetaLPackage.CHOOSE_RULE__VARIABLE:
        return ((InternalEList<?>)getVariable()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.CHOOSE_RULE__RANGES:
        return ((InternalEList<?>)getRanges()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.CHOOSE_RULE__GUARD:
        return basicSetGuard(null, msgs);
      case AsmetaLPackage.CHOOSE_RULE__DO_RULE:
        return basicSetDoRule(null, msgs);
      case AsmetaLPackage.CHOOSE_RULE__IFNONE:
        return basicSetIfnone(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetaLPackage.CHOOSE_RULE__VARIABLE:
        return getVariable();
      case AsmetaLPackage.CHOOSE_RULE__RANGES:
        return getRanges();
      case AsmetaLPackage.CHOOSE_RULE__GUARD:
        return getGuard();
      case AsmetaLPackage.CHOOSE_RULE__DO_RULE:
        return getDoRule();
      case AsmetaLPackage.CHOOSE_RULE__IFNONE:
        return getIfnone();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetaLPackage.CHOOSE_RULE__VARIABLE:
        getVariable().clear();
        getVariable().addAll((Collection<? extends VariableTerm>)newValue);
        return;
      case AsmetaLPackage.CHOOSE_RULE__RANGES:
        getRanges().clear();
        getRanges().addAll((Collection<? extends Term>)newValue);
        return;
      case AsmetaLPackage.CHOOSE_RULE__GUARD:
        setGuard((Term)newValue);
        return;
      case AsmetaLPackage.CHOOSE_RULE__DO_RULE:
        setDoRule((Rule)newValue);
        return;
      case AsmetaLPackage.CHOOSE_RULE__IFNONE:
        setIfnone((Rule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.CHOOSE_RULE__VARIABLE:
        getVariable().clear();
        return;
      case AsmetaLPackage.CHOOSE_RULE__RANGES:
        getRanges().clear();
        return;
      case AsmetaLPackage.CHOOSE_RULE__GUARD:
        setGuard((Term)null);
        return;
      case AsmetaLPackage.CHOOSE_RULE__DO_RULE:
        setDoRule((Rule)null);
        return;
      case AsmetaLPackage.CHOOSE_RULE__IFNONE:
        setIfnone((Rule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.CHOOSE_RULE__VARIABLE:
        return variable != null && !variable.isEmpty();
      case AsmetaLPackage.CHOOSE_RULE__RANGES:
        return ranges != null && !ranges.isEmpty();
      case AsmetaLPackage.CHOOSE_RULE__GUARD:
        return guard != null;
      case AsmetaLPackage.CHOOSE_RULE__DO_RULE:
        return doRule != null;
      case AsmetaLPackage.CHOOSE_RULE__IFNONE:
        return ifnone != null;
    }
    return super.eIsSet(featureID);
  }

} //ChooseRuleImpl
