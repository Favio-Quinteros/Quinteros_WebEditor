/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.asmetal.asmetaL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.asmetal.asmetaL.AsmetaLPackage;
import org.xtext.asmetal.asmetaL.ExportClause;
import org.xtext.asmetal.asmetaL.Header;
import org.xtext.asmetal.asmetaL.ImportClause;
import org.xtext.asmetal.asmetaL.Signature;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Header</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.HeaderImpl#getImportClause <em>Import Clause</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.HeaderImpl#getExportClause <em>Export Clause</em>}</li>
 *   <li>{@link org.xtext.asmetal.asmetaL.impl.HeaderImpl#getSignature <em>Signature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HeaderImpl extends MinimalEObjectImpl.Container implements Header
{
  /**
   * The cached value of the '{@link #getImportClause() <em>Import Clause</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportClause()
   * @generated
   * @ordered
   */
  protected EList<ImportClause> importClause;

  /**
   * The cached value of the '{@link #getExportClause() <em>Export Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExportClause()
   * @generated
   * @ordered
   */
  protected ExportClause exportClause;

  /**
   * The cached value of the '{@link #getSignature() <em>Signature</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignature()
   * @generated
   * @ordered
   */
  protected Signature signature;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HeaderImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetaLPackage.Literals.HEADER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ImportClause> getImportClause()
  {
    if (importClause == null)
    {
      importClause = new EObjectContainmentEList<ImportClause>(ImportClause.class, this, AsmetaLPackage.HEADER__IMPORT_CLAUSE);
    }
    return importClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExportClause getExportClause()
  {
    return exportClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExportClause(ExportClause newExportClause, NotificationChain msgs)
  {
    ExportClause oldExportClause = exportClause;
    exportClause = newExportClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.HEADER__EXPORT_CLAUSE, oldExportClause, newExportClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExportClause(ExportClause newExportClause)
  {
    if (newExportClause != exportClause)
    {
      NotificationChain msgs = null;
      if (exportClause != null)
        msgs = ((InternalEObject)exportClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.HEADER__EXPORT_CLAUSE, null, msgs);
      if (newExportClause != null)
        msgs = ((InternalEObject)newExportClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.HEADER__EXPORT_CLAUSE, null, msgs);
      msgs = basicSetExportClause(newExportClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.HEADER__EXPORT_CLAUSE, newExportClause, newExportClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signature getSignature()
  {
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSignature(Signature newSignature, NotificationChain msgs)
  {
    Signature oldSignature = signature;
    signature = newSignature;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetaLPackage.HEADER__SIGNATURE, oldSignature, newSignature);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignature(Signature newSignature)
  {
    if (newSignature != signature)
    {
      NotificationChain msgs = null;
      if (signature != null)
        msgs = ((InternalEObject)signature).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.HEADER__SIGNATURE, null, msgs);
      if (newSignature != null)
        msgs = ((InternalEObject)newSignature).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetaLPackage.HEADER__SIGNATURE, null, msgs);
      msgs = basicSetSignature(newSignature, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetaLPackage.HEADER__SIGNATURE, newSignature, newSignature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetaLPackage.HEADER__IMPORT_CLAUSE:
        return ((InternalEList<?>)getImportClause()).basicRemove(otherEnd, msgs);
      case AsmetaLPackage.HEADER__EXPORT_CLAUSE:
        return basicSetExportClause(null, msgs);
      case AsmetaLPackage.HEADER__SIGNATURE:
        return basicSetSignature(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetaLPackage.HEADER__IMPORT_CLAUSE:
        return getImportClause();
      case AsmetaLPackage.HEADER__EXPORT_CLAUSE:
        return getExportClause();
      case AsmetaLPackage.HEADER__SIGNATURE:
        return getSignature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetaLPackage.HEADER__IMPORT_CLAUSE:
        getImportClause().clear();
        getImportClause().addAll((Collection<? extends ImportClause>)newValue);
        return;
      case AsmetaLPackage.HEADER__EXPORT_CLAUSE:
        setExportClause((ExportClause)newValue);
        return;
      case AsmetaLPackage.HEADER__SIGNATURE:
        setSignature((Signature)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.HEADER__IMPORT_CLAUSE:
        getImportClause().clear();
        return;
      case AsmetaLPackage.HEADER__EXPORT_CLAUSE:
        setExportClause((ExportClause)null);
        return;
      case AsmetaLPackage.HEADER__SIGNATURE:
        setSignature((Signature)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetaLPackage.HEADER__IMPORT_CLAUSE:
        return importClause != null && !importClause.isEmpty();
      case AsmetaLPackage.HEADER__EXPORT_CLAUSE:
        return exportClause != null;
      case AsmetaLPackage.HEADER__SIGNATURE:
        return signature != null;
    }
    return super.eIsSet(featureID);
  }

} //HeaderImpl
